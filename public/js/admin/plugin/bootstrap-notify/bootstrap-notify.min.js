(function ($) {
    "use strict";

    function isDuplicateNotification(settings) {
        var duplicate = false;

        $('[data-notify="container"]').each(function () {
            var $container = $(this),
                title = $container.find('[data-notify="title"]').text().trim(),
                message = $container.find('[data-notify="message"]').html().trim(),
                isSameTitle = title === $("<div>").html(settings.content.title).text().trim(),
                isSameMessage = message === $("<div>").html(settings.content.message).text().trim(),
                isSameType = $container.hasClass("alert-" + settings.type);

            if (isSameTitle && isSameMessage && isSameType) {
                duplicate = true;
                return false; // Thoát khỏi vòng lặp each
            }
        });

        return duplicate;
    }

    function Notification(element, content, options) {
        var defaultSettings = {
            element: "body",
            type: "info",
            allow_dismiss: true,
            allow_duplicates: true,
            newest_on_top: false,
            showProgressbar: false,
            placement: { from: "top", align: "right" },
            offset: 20,
            spacing: 10,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            url_target: "_blank",
            animate: { enter: "animated fadeInDown", exit: "animated fadeOutUp" },
            onShow: null,
            onShown: null,
            onClose: null,
            onClosed: null,
            icon_type: "class",
            template: `
                <div data-notify="container" class="col-10 col-xs-11 col-sm-4 alert alert-{0}" role="alert">
                    <button type="button" class="close" data-notify="dismiss">&times;</button>
                    <span data-notify="icon"></span>
                    <span data-notify="title">{1}</span>
                    <span data-notify="message">{2}</span>
                    <div class="progress" data-notify="progressbar">
                        <div class="progress-bar progress-bar-{0}" role="progressbar" style="width: 0%;"></div>
                    </div>
                    <a href="{3}" target="{4}" data-notify="url"></a>
                </div>`
        };

        var settings = $.extend(true, {}, defaultSettings, options);

        if (!settings.allow_duplicates && isDuplicateNotification(settings)) return;

        this.settings = settings;
        this.init();
    }

    Notification.prototype = {
        init: function () {
            this.createNotify();
            this.setPlacement();
            this.bindEvents();
        },

        createNotify: function () {
            var content = this.settings.content;

            this.$ele = $(String.format(this.settings.template, this.settings.type, content.title, content.message, content.url, content.target));
            this.$ele.attr("data-notify-position", this.settings.placement.from + "-" + this.settings.placement.align);

            if (!this.settings.allow_dismiss) {
                this.$ele.find('[data-notify="dismiss"]').hide();
            }

            if (!this.settings.showProgressbar) {
                this.$ele.find('[data-notify="progressbar"]').remove();
            }

            $(this.settings.element).append(this.$ele);
        },

        setPlacement: function () {
            var offsetY = this.settings.offset.y;
            var self = this;

            $('[data-notify-position="' + this.settings.placement.from + "-" + this.settings.placement.align + '"]:not([data-closing="true"])')
                .each(function () {
                    offsetY = Math.max(offsetY, parseInt($(this).css(self.settings.placement.from)) + $(this).outerHeight() + self.settings.spacing);
                });

            if (this.settings.newest_on_top) offsetY = this.settings.offset.y;

            this.$ele.css(this.settings.placement.from, offsetY + "px").addClass(this.settings.animate.enter);
        },

        bindEvents: function () {
            var self = this;

            this.$ele.find('[data-notify="dismiss"]').on("click", function () {
                self.close();
            });

            this.$ele.on("mouseenter", function () {
                $(this).data("hover", "true");
            }).on("mouseleave", function () {
                $(this).data("hover", "false");
            });

            if (this.settings.delay > 0) {
                var timer = setInterval(function () {
                    var remainingTime = parseInt(self.$ele.data("notify-delay")) - self.settings.timer;

                    if (self.$ele.data("hover") !== "true") {
                        var progress = (self.settings.delay - remainingTime) / self.settings.delay * 100;
                        self.$ele.find('[data-notify="progressbar"] > div').css("width", progress + "%");
                    }

                    self.$ele.data("notify-delay", remainingTime);

                    if (remainingTime <= 0) {
                        clearInterval(timer);
                        self.close();
                    }
                }, self.settings.timer);

                self.$ele.data("notify-delay", self.settings.delay);
            }
        },

        close: function () {
            var self = this;

            this.$ele.attr("data-closing", "true").addClass(this.settings.animate.exit);

            setTimeout(function () {
                self.$ele.remove();
            }, 600);
        }
    };

    $.notify = function (content, options) {
        return new Notification(this, content, options);
    };

    String.format = function () {
        var str = arguments[0];

        for (var i = 1; i < arguments.length; i++) {
            str = str.replace(new RegExp("\\{" + (i - 1) + "\\}", "gm"), arguments[i]);
        }

        return str;
    };
})(jQuery);
